using SudokuGame.Models;

namespace SudokuGame.Services;

public class SudokuGenerator
{
  private static Random _random = new Random();
  private int[,] _board = new int[9, 9];

  private readonly IThemeService _themeService;

  private readonly string[] _constBoard =
  [
    "097318256526700083803620947752900001349086072681057439130000795268079314975430620",
    "750043109432169805691875243060527310143086520005004986914658032086730490007401658",
    "910045700730691085458003960645380219201064837873129604164758390320010578500930146",
    "547900003006547928982136074371420896425860317860071002294618735750290081600703240",
    "830021050670083241214067093308210760746000129192674385081742006427356018063108472",
    "021960734374081965695700280710526003043008520256493108480612350162309047509840612",
    "014398056256710308098006704831609400470831620629400831187963542502187900963540180",
    "040958610958216347016740859875690423024005196601324070462507980537089260000462705",
    "506392471047568203309174805734681020010925347902043186093000652000256930265039718",
    "061327984809001730327849106980050470034986215152734608210478509095213807478005001",
    "020049508390708612780102439512093840630487251078521963260004105850230004947815326",
    "295067013860134520134295786519026348020403950480509670941052030078940265052300194",
    "405903200693028005218045003827459361061287549009630007956312084784096130132074956",
    "000079653065280710971563800814950236003018597759020148246801375000735462507642981",
    "650841790041972563970650081000739056016428379709516240360180920185204637290007815",
    "306840009845000763912376458207030000034501972501297006159723084703468591468159237",
    "720345806689721403340689217978030605132560780560970021490810532203096178800253004",
    "200849057948075020570102894120098465654000009893450710715283946469500238380964571",
    "960857340007243069243961758390186507086005093725394601009670235608530914500419806",
    "067324080085900342342158967590060210210580736706241598023410800451807603879032451",
    "619002058385901042724538091146025830090610205050389160908147523532896000471250986",
    "064002315301640087278513946709805030082136794613090508036078152897251460120004879",
    "182439070675801349903756281856214907030060024421307608007602403300075862068143795",
    "806000970415790683009803541290306015300175809057289036983604257572938164601507398",
    "769804325253679418080523076900740031478135692315206807032980054040062080897451003",
    "408601325916025840253840691580970213102408076009000458345789102890060534621530789",
    "045013600170690452968025731781509304432801006600340810314087265897256143526104900",
    "423879106798060320651342097587620400934058010216493080170036048360904501849517260",
    "851023479940851236603940508430009002218436790509218064195382047704095803382764000",
    "809245316204103789006890024308704651742516938061389470603072140015008207027451063",
    "596341208014078569207569340070856004900107850865000020058090402600410785400780090",
    "763001402081450763452703981800500007017829030000617800248075006305106048100200375",
    "901760043760803000040001060304170286075286090206300175608409027410527038007608419",
    "076805392200706004085023001950302168800594207002680450627008000018439726040200815",
    "109784000874065010625019480300970020046001870000006135482603791063197208907802006",
    "186004905472539068003000000017003600608100350340086201760205893839607542524090710",
    "026781000004562180718000265632815704400620008001497300240156879080230600160078400",
    "001580000068904321947312568089407005403050080015698073890720150156040002702065800",
    "497050061085210900000904805056142003073560024214039086030620009040387650562491300",
    "200053809003040712908217350179032600032406970086079235001000407860794120090301508",
    "968035000250000806014986005370400080826300049491860007189023750040198260630570918",
    "217000048006498002804012060042570609960241053305869021700956010059000207401327506",
    "617920058249080076030061402006200000470839061300605724064090005923000047581476239",
    "257040316610005804008061050086010475570600200132450600325904168861502007009086520",
    "050671289016029405098040060532016970980253006104790023645080092800902604029004010",
    "700400321320900040640231700203090400087146053410523987072689004869300072034700860",
    "391058700706013802825407000584796103132845697079301508210574000000000280063082000",
    "513009740402135690008724153090400580000068920056000031605897010104350009789241305",
    "600829030700400928002100050294783506370610049561902000157204893400390170839001062",
    "619002740325874016840090503781906000962543107534700060176039850008000390093080600",
    "082614735000000100416370829041056983057093402398042076739000001065930040800500397",
    "713265490048000020256904073030570842567000310480003607805349761001052030094607080",
    "692037518150006070043581902000090020264750089800602735000310890031069247980004351",
    "497815630581602974203074800000750108010046050970020046708060403349087061106093500",
    "207583960053900127090127583009070630001635249305209071040002300902018456008406090",
    "098270300427536801603901704760100900000490267049607013501049602230815070904000185",
    "317654908604208100098310000000570096946102703570940012435869070000405600060721345",
    "040650037387124905090378000901800240420010086876002091769200104238541000510090328",
    "634915080500078364000040900189600543053801670760534010246150700078462030010789006",
    "187400092060000000430926800301602709009310264624800501518200906790581423203069108",
    "000340008300798001798000435000000304002034709830000600000900020217056890983207546",
    "300060420000001908600020100800170350593006000710953604065248700107690800408000096",
    "005012000980645170102890005006900508397008216008006397600000800001089024009060030",
    "009050100002000897014980023470000602908002010000170389007328000506091238020640070",
    "083000005050083600000001370078102534040600209190045007207019480009004026004067950",
    "500070064092806130400153207027490506000000000980500003040085301850317002003904600",
    "059716800601408000800503610034059100180340950000800043720900000506007039090100702",
    "000285700825700000904010085000836950306052107092107000030060020658029000200301508",
    "090061302010042780020009560049100256000200030000904170200800017908007405070405893",
    "307062900600800130090731000800900050061004070739106000153028004074300826006007503",
    "084500026009000480000014903735002809062098537910370000800901300203000190090703600",
    "352701000067080502004053000000500046000604028400002005029370060641928053070106089",
    "203060140000910302941000087108049526025007003094650871030026010017000200000000035",
    "500400370000070810673800429090708000401290700067054293709081500005930081006500000",
    "000030041015000730327145009003000006000700405004608317000870153030409078082351900",
    "008027405540810762206900381000790040057481206010002000301000850000100000092048610",
    "000059036050310082010070049000020003000160204427590600542930867706045001000687000",
    "207300100056481072408079000000000000705010408030890057982537041000146820000920005",
    "602010007000400090847962150000079010769105084005834700001008000538706920000090508",
    "870940350005007140914000060521630900490502806003409215000700000040100603009326000",
    "700910000345000019901054067030600901190500706000140005010875600000430578857200004",
    "000056003050800912000120005098201704261547030000300126080010267672000091000672000",
    "150020076002600001087000304576309200804067000391800005203004050965001007740906030",
    "510900280030026140628405090106090802300082061080600903003000019051308020400100030",
    "010640970009105462260098000000203080006509103020000700730001806002986507090307240",
    "009050618010300450050816003090040060100008395208003701435001080670002000982430100",
    "970008000800000010500019300620057403010093280040286157106004032090832501000560070",
    "670530091400021870092086050080367405030240100004009000047000900200098743000073510",
    "052861439100093000300200806543706008981000000600089000000608900010502680806914500",
    "020050403003829750056304908000060030000981200260005089802040390090008040605190802"
  ];

  public SudokuGenerator(IThemeService themeService)
  {
    _themeService = themeService;
  }

  public List<SudokuCell> SelectGame(int hurdle)
  {
    int[,] result = new int[9, 9];
    if (hurdle > _constBoard.Length || hurdle < 1)
    {
      hurdle = 1;
    }
    for (int i = 0; i < 81; i++)
    {
      result[i / 9, i % 9] = _constBoard[hurdle - 1][i] - '0';
    }
    return ConvertToSudokuCells(result, 81);
  }

  public int[,] GeneratePuzzle(int emptyCells = 40)
  {
    FillDiagonalBoxes();
    Solve(0, 0);
    RemoveNumbers(emptyCells);
    return _board;
  }

  private void FillDiagonalBoxes()
  {
    for (int i = 0; i < 9; i += 3)
    {
      FillBox(i, i);
    }
  }

  private void FillBox(int row, int col)
  {
    HashSet<int> usedNumbers = new HashSet<int>();

    for (int i = 0; i < 3; i++)
    {
      for (int j = 0; j < 3; j++)
      {
        int num;
        do
        {
          num = _random.Next(1, 10);
        } while (usedNumbers.Contains(num));

        usedNumbers.Add(num);
        _board[row + i, col + j] = num;
      }
    }
  }

  private bool Solve(int row, int col)
  {
    if (row == 9)
      return true;
    if (col == 9)
      return Solve(row + 1, 0);
    if (_board[row, col] != 0)
      return Solve(row, col + 1);

    List<int> numbers = Enumerable.Range(1, 9).OrderBy(n => _random.Next()).ToList();
    foreach (var num in numbers)
    {
      if (IsValid(row, col, num))
      {
        _board[row, col] = num;
        if (Solve(row, col + 1))
          return true;
        _board[row, col] = 0;
      }
    }
    return false;
  }

  private bool IsValid(int row, int col, int num)
  {
    for (int i = 0; i < 9; i++)
    {
      if (_board[row, i] == num || _board[i, col] == num)
      {
        return false;
      }
    }
    int boxRow = (row / 3) * 3,
      boxCol = (col / 3) * 3;
    for (int i = 0; i < 3; i++)
    {
      for (int j = 0; j < 3; j++)
      {
        if (_board[boxRow + i, boxCol + j] == num)
        {
          return false;
        }
      }
    }
    return true;
  }

  private void RemoveNumbers(int emptyCells)
  {
    int count = emptyCells;
    while (count > 0)
    {
      int row = _random.Next(9);
      int col = _random.Next(9);
      if (_board[row, col] != 0)
      {
        _board[row, col] = 0;
        count--;
      }
    }
  }

  public List<SudokuCell> GenerateBoard(DifficultyLevel difficulty = DifficultyLevel.Easy)
  {
    //int[,] board = new int[9, 9];
    //FillBoard(board);

    int clues = difficulty switch
    {
      DifficultyLevel.Easy => 40,
      DifficultyLevel.Medium => 30,
      DifficultyLevel.Hard => 20,
      _ => 30
    };

    _board = new int[9, 9];
    _board = GeneratePuzzle(60 - clues);

    return ConvertToSudokuCells(_board, 81);
  }

  private void FillBoard(int[,] board)
  {
    for (int i = 0; i < 9; i++)
    {
      for (int j = 0; j < 9; j++)
      {
        board[i, j] = (i * 3 + i / 3 + j) % 9 + 1;
      }
    }

    for (int i = 0; i < 9; i++)
    {
      int swapIndex = _random.Next(0, 9);
      for (int j = 0; j < 9; j++)
      {
        (board[i, j], board[swapIndex, j]) = (board[swapIndex, j], board[i, j]);
      }
    }
  }

  private List<SudokuCell> ConvertToSudokuCells(int[,] board, int clues)
  {
    List<SudokuCell> cells = new List<SudokuCell>();
    int removedCells = 81 - clues;

    for (int i = 0; i < 9; i++)
    {
      for (int j = 0; j < 9; j++)
      {
        cells.Add(
          new SudokuCell
          {
            Value = board[i, j],
            IsFixed = board[i, j] != 0,
            Row = i,
            Col = j,
            ForeColor = _themeService.FixedColor,
            CellMargin = (i, j) switch
            {
              (i: var x, j: var y) when x % 3 == 2 && y % 3 == 2 => new Thickness(1, 1, 2, 2),
              (i: var x, j: var y) when x % 3 == 0 && y % 3 == 2 => new Thickness(1, 2, 2, 1),
              (i: var x, j: var y) when x % 3 == 0 && y % 3 == 0 => new Thickness(2, 2, 1, 1),
              (i: var x, j: var y) when x % 3 == 2 && y % 3 == 0 => new Thickness(2, 1, 1, 2),
              (i: var x, j: var y) when x % 3 == 2 => new Thickness(1, 1, 1, 2),
              (i: var x, j: var y) when x % 3 == 0 => new Thickness(1, 2, 1, 1),
              (i: var x, j: var y) when y % 3 == 0 => new Thickness(2, 1, 1, 1),
              (i: var x, j: var y) when y % 3 == 2 => new Thickness(1, 1, 2, 1),
              _ => new Thickness(1),
            }
          }
        );
      }
    }

    while (removedCells > 0)
    {
      int index = _random.Next(0, 81);
      if (cells[index].Value != 0)
      {
        cells[index].Value = 0;
        cells[index].IsFixed = false;
        removedCells--;
      }
    }

    return cells;
  }
}

public enum DifficultyLevel
{
  Easy,
  Medium,
  Hard
}
